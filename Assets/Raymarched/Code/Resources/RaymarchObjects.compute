// Referenced: https://www.youtube.com/watch?v=BNZtUB7yhX4
#pragma kernel RenderRaymarch
#include "UnityCG.cginc"

struct RaymarchedObj
{
    int type;
    int solidType;
    float3 position;
    float4 rotation;
    float3 scale;
    float3 repeatSize;
    float3 color;
    float param0;
    float param1;
    float param2;
    float param3;
    float param4;
};

// Camera vars

float2 size;
float4x4 camToWorld, camInverseProjection;
float3 cameraPos;
float camFarPlane, camNearPlane;
Texture2DArray<float> _CameraDepthTexture; // HDRP Depth Texture Array
StructuredBuffer<int2> _DepthPyramidMipLevelOffsets;

// Camera functions

// Gets the view ray direction from a screen coordinate
inline float3 getCamRayDir(float2 coord)
{
    return normalize(mul(camToWorld, float4(mul(camInverseProjection, float4(coord, 0.0f, 1.0f)).xyz, 0.0f)).xyz);
}

float getCamDepth(int2 coord)
{
    int2 mipCoord = coord.xy >> int(0);
    int2 mipOffset = _DepthPyramidMipLevelOffsets[int(0)];
    return Linear01Depth(_CameraDepthTexture.Load(int4(mipOffset + mipCoord, 0, 0)));
}

// SDFs
// Reference: https://iquilezles.org/articles/distfunctions/

float sdfSphere(float3 pt, float rad)
{
    return length(pt) - rad;
}

float sdfBox(float3 pt, float3 box)
{
    float3 q = abs(pt) - box;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sdfRoundBox(float3 p, float3 b, float r)
{
    float3 q = abs(p) - b + r;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

float sdfTorus(float3 p, float2 t)
{
    float2 q = float2(length(p.xz) - t.x, p.y);
    return length(q) - t.y;
}

float sdfMandlebulb(float3 pt, int steps)
{
    float3 w = pt;
    float m = dot(w, w);

    float4 trap = float4(abs(w), m);
    float dz = 1.0;
    
    for (int i = 0; i < steps; i++)
    {
#if 0
        // polynomial version (no trigonometrics, but MUCH slower)
        float m2 = m*m;
        float m4 = m2*m2;
		dz = 8.0*sqrt(m4*m2*m)*dz + 1.0;

        float x = w.x; float x2 = x*x; float x4 = x2*x2;
        float y = w.y; float y2 = y*y; float y4 = y2*y2;
        float z = w.z; float z2 = z*z; float z4 = z2*z2;

        float k3 = x2 + z2;
        float k2 = inversesqrt( k3*k3*k3*k3*k3*k3*k3 );
        float k1 = x4 + y4 + z4 - 6.0*y2*z2 - 6.0*x2*y2 + 2.0*z2*x2;
        float k4 = x2 - y2 + z2;

        w.x = p.x +  64.0*x*y*z*(x2-z2)*k4*(x4-6.0*x2*z2+z4)*k1*k2;
        w.y = p.y + -16.0*y2*k3*k4*k4 + k1*k1;
        w.z = p.z +  -8.0*y*k4*(x4*x4 - 28.0*x4*x2*z2 + 70.0*x4*z4 - 28.0*x2*z2*z4 + z4*z4)*k1*k2;
#else
        // trigonometric version (MUCH faster than polynomial)
        
        // dz = 8*z^7*dz
        dz = 8.0 * pow(m, 3.5) * dz + 1.0;
      
        // z = z^8+c
        float r = length(w);
        float b = 8.0 * acos(w.y / r);
        float a = 8.0 * atan2(w.x, w.z);
        w = pt + pow(r, 8.0) * float3(sin(b) * sin(a), cos(b), sin(b) * cos(a));
#endif        
        
        trap = min(trap, float4(abs(w), m));

        m = dot(w, w);
        if (m > 256.0)
            break;
    }

    // distance estimation (through the Hubbard-Douady potential)
    return 0.25 * log(m) * sqrt(m) / dz;
}

// Raymarching vars

int maxIterations;
int maxLightIterations;
int objectCount;
float3 sunDir;
float ambientLight;
float shadowRayMaxLength;
float penumbraSize;
float resolution;

// Buffers

StructuredBuffer<RaymarchedObj> objects;
RWTexture2D<float4> result;

// Raymarching fucntions

inline float mod(float x, float y)
{
    return x - y * floor(x / y);
}

// Quaternion ref: https://gist.github.com/mattatz/40a91588d5fb38240403f198a938a593
// Quaternion multiplication
float4 qmul(float4 q1, float4 q2)
{
    return float4(
        q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
    );
}

// Quaternion rotation
float3 rotate_vector(float3 v, float4 r)
{
    float4 r_c = r * float4(-1, -1, -1, 1);
    return qmul(r, qmul(float4(v, 0), r_c)).xyz;
}

// Get scene color and min value
float2 sampleSceneSDF(float3 pt)
{
    float sdfVal = 2000000000;
    int objIndex = 0;
    
    // March through every object in the scene
    // Objects are sorted such that removal follows addition
    
    for (int i = 0; i < objectCount; i++)
    {
        // Get object position
        
        float newSDFVal = 2000000000;
        float3 objPos = pt - objects[i].position;
        
        // Infinite repetition check
        
        float3 objRepeat = objects[i].repeatSize / 2;
        objPos = float3(objRepeat.x > 0 ? mod(objPos.x + objRepeat.x, objRepeat.x * 2) - objRepeat.x : objPos.x,
                        objRepeat.y > 0 ? mod(objPos.y + objRepeat.y, objRepeat.y * 2) - objRepeat.y : objPos.y,
                        objRepeat.z > 0 ? mod(objPos.z + objRepeat.z, objRepeat.z * 2) - objRepeat.z : objPos.z);
        
        objPos = rotate_vector(objPos, objects[i].rotation);
        objPos *= objects[i].scale;
        
        // Check object type
        
        int type = objects[i].type;
        if (type == 0)
            newSDFVal = sdfSphere(objPos, objects[i].param0);
        else if (type == 1)
            newSDFVal = sdfBox(objPos, float3(objects[i].param0, objects[i].param1, objects[i].param2));
        else if (type == 2)
            newSDFVal = sdfRoundBox(objPos, float3(objects[i].param0, objects[i].param1, objects[i].param2), objects[i].param3);
        else if (type == 3)
            newSDFVal = sdfTorus(objPos, float2(objects[i].param0, objects[i].param1));
        
        // Check add / remove pass
        
        if (objects[i].solidType == 0)
        {
            if (newSDFVal < sdfVal)
            {
                objIndex = i;
                sdfVal = newSDFVal;
            }
        }
        else if (objects[i].solidType == 1)
            sdfVal = max(-newSDFVal, sdfVal);
    }
    
    return float2(sdfVal, objIndex);
}

// Calculates the normal from a sdf hit point
float3 calcNormal(float3 pt)
{
    const float EPS = 0.0001f;
    const float2 h = float2(EPS, 0);
    return normalize(float3(sampleSceneSDF(pt + h.xyy).x - sampleSceneSDF(pt - h.xyy).x,
                           sampleSceneSDF(pt + h.yxy).x - sampleSceneSDF(pt - h.yxy).x,
                           sampleSceneSDF(pt + h.yyx).x - sampleSceneSDF(pt - h.yyx).x));
}

// Calculates the lighting amount based on a normal vector
float normalLighting(float3 normal)
{
    return clamp(dot(sunDir, normal), 0, 1);
}

// Calculates shadows
// Adapted from: https://www.shadertoy.com/view/lsKcDD
float softshadow(float3 rayOrigin, float3 rayDir, float minDist, float maxDist)
{
    float res = 1.0;
    float rayDist = minDist;
    
    for (int i = 0; i < maxLightIterations && rayDist < maxDist; i++)
    {
        float sceneSDF = sampleSceneSDF(rayOrigin + rayDist * rayDir).x;
        res = min(res, sceneSDF / (penumbraSize * rayDist));
        rayDist += clamp(sceneSDF, 0.005, 0.50);
        
        if (res < -1.0 || rayDist > maxDist)
            break;
    }
    
    res = max(res, -1.0);
    return 0.25 * (1.0 + res) * (1.0 + res) * (2.0 - res);
}

// Calculates ambient occlusion
// Adapted from: https://www.shadertoy.com/view/lsKcDD
float calcAO(float3 pos, float3 nor)
{
    float occ = 0.0;
    float sca = 1.0;
    
    for (int i = 0; i < 5; i++)
    {
        float h = 0.001 + 0.15 * float(i) / 4.0;
        float d = sampleSceneSDF(pos + h * nor).x;
        occ += (h - d) * sca;
        sca *= 0.95;
    }
    
    return clamp(1.0 - 1.5 * occ, 0.0, 1.0);
}

// Vars for cone-tracing

float camTanFov;
float camPlaneSubdivisions;
RWTexture2D<float2> coneResult;

// Cone-tracing initial quick trace
// Adapted from: https://medium.com/@nabilnymansour/cone-marching-in-three-js-6d54eac17ad4#:~:text=using%20cone%2Dmarching.-,The%20Algorithm,the%20cone%20has%20hit%20anything.
float2 coneMarch(float3 cro, float3 crd)
{
    float d = camNearPlane; // total distance travelled
    float cd; // current scene distance
    float ccr; // current cone radius
    float3 p; // current position of ray
    uint i = 0; // steps iter
    
    for (i; i < maxIterations / 4u; ++i)
    { // main loop
        p = cro + d * crd; // calculate new position
        cd = sampleSceneSDF(p).x; // get scene distance
        ccr = (d * camTanFov) * 2. / camPlaneSubdivisions; // calculate cone radius
        
        // if current distance is less than cone radius with some padding or our distance is too big, break loop
        if (cd < ccr * 1.25 || d >= camFarPlane)
            break;

        // otherwise, add new scene distance to total distance
        d += cd;
    }

    return float2(d, i); // finally, return scene distance
}

// Debug vars

int debugRayCount;
int enableConeTracing;

// Raymarches the scene
[numthreads(8, 8, 1)]
void RenderRaymarch(uint3 id : SV_DispatchThreadID)
{   
    // Get ray
    
    float2 percentOnTex = id.xy / size;
    float3 rayDir = getCamRayDir(percentOnTex * 2 - 1);
    
    // Perform raymarching
    
    float depth = getCamDepth(id.xy);
    float distOnRay = camNearPlane;
    int i = 0;
    
    if (enableConeTracing)
    {
        float2 coneMarchVars = coneMarch(cameraPos, rayDir);
        distOnRay = coneMarchVars.x;
        i = coneMarchVars.y;
    }
    
    for (i; i < maxIterations; i++)
    {
        float3 curRayPt = cameraPos + (distOnRay * rayDir);
        float2 sceneVal = sampleSceneSDF(curRayPt);
        
        if (sceneVal.x < resolution)
        {
            float3 normal = calcNormal(curRayPt);
            float shadow = softshadow(curRayPt, sunDir, 0.02, shadowRayMaxLength);
            float lightAmt = (normalLighting(normal) * shadow + ambientLight) * calcAO(curRayPt, normal);
            
            result[id.xy] = float4(objects[sceneVal.y].color * lightAmt, 1);
            break;
        }
        
        //if (distOnRay / camFarPlane > depth)
        //    break;
        if (distOnRay > camFarPlane)
            break;
        distOnRay += sceneVal.x;
    }
    
    if (debugRayCount)
        result[id.xy] = float4(i / (float) maxIterations, 0, 0, 1);
}
